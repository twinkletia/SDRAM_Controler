#include "SDRAM_CTR.inc"
#include "sdr.inc"
#include "ASYNCTX.inc"

#define READ	1'b1
#define WRITE	1'b0

declare SDRAM_SIM{
	input	sdrclk;
	input	sdrclk1;
}

module SDRAM_SIM{
	sdr sdrmodel;
	SDRAM_CTR sdrctr;
	ASYNCTX tx;

	reg req_flag = 1;
	reg write_flag = 0;
	reg cnt[10] = 0;
	reg bank[2], row[13], column[10], data[16];
	reg datao[16];
	reg finish_status = 0;
	
	proc_name sdram_write(bank, row, column, data);
	proc_name sdram_read(bank, row, column);

	// SDRAM用クロック
	sdrctr.m_clock = sdrclk;

	// モジュール間IF
	tx.aTxIn    = sdrctr.rxout;
	sdrctr.rxin = tx.aTxOut;

	if(write_flag) sdrmodel.Dq = sdrctr.DRAM_DO;
	else{
		sdrmodel.Dq = 16'hZZZZ;
		sdrctr.DRAM_DI = sdrmodel.Dq;
	}

	sdrmodel.Clk   = sdrclk1;
	sdrmodel.Cke   = sdrctr.DRAM_CKE;
	sdrmodel.Addr  = sdrctr.DRAM_A;
	sdrmodel.Ba    = sdrctr.DRAM_BA;
	sdrmodel.Dqm   = {sdrctr.DRAM_UDQM, sdrctr.DRAM_LDQM};
	sdrmodel.Cs_n  = sdrctr.DRAM_CS;
	sdrmodel.Ras_n = sdrctr.DRAM_RAS;
	sdrmodel.Cas_n = sdrctr.DRAM_CAS;
	sdrmodel.We_n  = sdrctr.DRAM_WE;

	/* シミュレーションここから */
	finish_status := sdrctr.finish_init;
	if(sdrctr.finish_init) cnt++;
	if(finish_status != sdrctr.finish_init){
		_display("\nSDRAM INITIALLIZATION FINISHED\n");
	}

	any{
		cnt == 10'd10: sdram_write(2'd0, 13'd100, 10'd0, 16'h0CC0);
		cnt == 10'd70: sdram_read(2'd0, 13'd100, 10'd0);
		cnt == 10'd100: _finish("%d", datao);
	}

	/* シミュレーションここまで */

	proc sdram_write{
		if(req_flag){
			tx.aTxReq();
			req_flag := 0;
		}

		// 書込み完了まで送信し続ける
		write_flag     := 1;
		sdrctr.rw_mode = WRITE;
		sdrctr.bank    = bank;
		sdrctr.row     = row;
		sdrctr.column  = column;
		sdrctr.datai0   = data;
		sdrctr.datai1   = 16'h0009;
		sdrctr.datai2   = 16'h000A;
		sdrctr.datai3   = 16'h000B;
		sdrctr.datai4   = 16'h000C;
		sdrctr.datai5   = 16'h000D;
		sdrctr.datai6   = 16'h000E;
		sdrctr.datai7   = 16'h000F;
	}

	proc sdram_read{
		if(req_flag){
			tx.aTxReq();
			req_flag := 0;
		}

		// 読込み完了まで送信し続ける
		sdrctr.rw_mode = READ;
		sdrctr.bank    = bank;
		sdrctr.row     = row;
		sdrctr.column  = column;
	}

	func tx.aTxAck seq{
		{
			sdram_write.finish();
			sdram_read.finish();
		}
		{
			req_flag := 1;
			write_flag := 0;
			datao := sdrctr.datao0;
		}
	}
}

